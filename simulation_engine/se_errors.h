/*a Copyright

  This file 'se_errors.h' copyright Gavin J Stark 2003, 2004

  This is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free Software
  Foundation, version 2.1.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even implied warranty of MERCHANTABILITY
  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.
*/

/*a Wrapper
 */
#ifdef __INC_SE_ERRORS
#else
#define __INC_SE_ERRORS

/*a Includes
 */
#include "c_sl_error.h"

/*a Error number enumerations
 */
/*t error_number_se_*
 */
enum
{
     error_number_se_internal_module_unknown = error_number_base_se,
     error_number_se_bad_bus_width_or_start,
     error_number_se_duplicate_name,
     error_number_se_unknown_clock_or_signal,
     error_number_se_multiple_source_clocks,
     error_number_se_multiple_global_drivers,
     error_number_se_multiple_port_drivers,
     error_number_se_unknown_input,
     error_number_se_unknown_output,
     error_number_se_unknown_module_type,
     error_number_se_unknown_module,
     error_number_se_unknown_instance,
     error_number_se_unknown_global,
     error_number_se_unknown_clock,
     error_number_se_expected_canonical_signal_name,
     error_number_se_bind_needs_global,
     error_number_se_clock_needs_clock_driver,
     error_number_se_misuse_of_clock,
     error_number_se_bus_width_mismatch,
     error_number_se_bus_width_mismatch_check,
     error_number_se_undriven_input,
     error_number_se_undriven_clock,
     error_number_se_undriven_global,
     error_number_se_unloaded_output,
     error_number_se_unloaded_global,
     error_number_se_dated_message,
     error_number_se_dated_assertion,
     error_number_se_dated_coverage,
};

/*t error_id_se_*
 */
enum
{
     error_id_se_internal_module_generic_logic_instantitate,
     error_id_se_register_input_used_on_clock,
     error_id_se_register_output_generated_on_clock,
     error_id_se_register_comb_input,
     error_id_se_register_comb_output,
     error_id_se_c_engine,
     error_id_se_c_engine_read_and_interpret_hw_file,
     error_id_se_c_engine_instantiate,
     error_id_se_c_engine_global_signal,
     error_id_se_c_engine_name,
     error_id_se_c_engine_drive,
     error_id_se_c_engine_bind_clock,
     error_id_se_c_engine_bit_extract,
     error_id_se_c_engine_data_mux,
     error_id_se_c_engine_compare,
     error_id_se_c_engine_decode,
     error_id_se_c_engine_generic_logic,
     error_id_se_c_engine_check_connectivity,
};

/*a Error messages (default)
 */
/*v default error messages
 */
#define C_SE_ERROR_DEFAULT_MESSAGES \
{ error_number_se_internal_module_unknown,        "Unknown internal moduel type '%s0' at line %l of file %f" }, \
{ error_number_se_bad_bus_width_or_start,         "Bad bus width (in %d0, out %d1) or start %d2 at line %l of file %f" }, \
{ error_number_se_duplicate_name,                 "Duplicate name '%s0' at line %l of file %f" }, \
{ error_number_se_unknown_clock_or_signal,        "Could not find both signal '%s1' and clock '%s2' in module '%s0' of type %s3" }, \
{ error_number_se_multiple_source_clocks,         "Attempt to assert signal '%s0' is generated by two clocks '%s1' and '%s2' on module %s3 of type %s4" }, \
{ error_number_se_multiple_global_drivers,        "Attempt to drive global signal with more than one driver (including '%s0') on module %s1 of type %s2" }, \
{ error_number_se_multiple_port_drivers,          "Attempt to drive port with more than one driver (including '%s0') on module %s1 of type %s2" }, \
{ error_number_se_unknown_input,                  "Could not find input '%s0' to define input use on module %s1 of type %s2" }, \
{ error_number_se_unknown_output,                 "Could not find output '%s0' to define output use on module %s1 of type %s2" }, \
{ error_number_se_unknown_module_type,            "Could not find module type '%s0' at line %l of file %f" }, \
{ error_number_se_unknown_module,                 "Could not find module '%s0' at line %l of file %f" }, \
{ error_number_se_unknown_instance,               "Could not find module instance '%s0' at line %l of file %f" }, \
{ error_number_se_unknown_global,                 "Could not find global signal '%s0' at line %l of file %f" }, \
{ error_number_se_unknown_clock,                  "Could not find clock '%s0' at line %l of file %f" }, \
{ error_number_se_expected_canonical_signal_name, "Expected signal name of type <module>.<signal> for non-global signal '%s0' at line %l of file %f" }, \
{ error_number_se_bind_needs_global,              "Binding needs one of the signals to be global, but got '%s0' and '%s1' at line %l of file %f" }, \
{ error_number_se_clock_needs_clock_driver,       "Clock needs clock driver (got '%s0') at line %l of file %f" }, \
{ error_number_se_misuse_of_clock,                "Misuse of clock '%s0' at line %l of file %f" }, \
{ error_number_se_bus_width_mismatch,             "Mismatch of bus widths %d0 and %d1 at line %l of file %f" }, \
{ error_number_se_bus_width_mismatch_check,       "Mismatch of bus widths ('%s0.%s1') %d2 and ('%s3') %d4" }, \
{ error_number_se_undriven_input,                 "Undriven input '%s1' on module '%s0'" }, \
{ error_number_se_undriven_clock,                 "Undriven clock '%s1' on module '%s0'" }, \
{ error_number_se_undriven_global,                "Undriven global '%s0'" }, \
{ error_number_se_unloaded_output,                "Unloaded output '%s1' on module '%s0'" }, \
{ error_number_se_unloaded_global,                "Unloaded global '%s0'" }, \
{ error_number_se_dated_message,                  "sim:%d0:%s1:%s2" }, \
{ error_number_se_dated_assertion,                "sim:%d0:%s1:ASSERTION FAILED:%s2" }, \
{ error_number_se_dated_coverage,                 "sim:%d0:%s1:COVERAGE:%s2" }, \
{ -1, NULL }

/*a Wrapper
 */
#endif

/*a Editor preferences and notes
mode: c ***
c-basic-offset: 4 ***
c-default-style: (quote ((c-mode . "k&r") (c++-mode . "k&r"))) ***
outline-regexp: "/\\\*a\\\|[\t ]*\/\\\*[b-z][\t ]" ***
*/

