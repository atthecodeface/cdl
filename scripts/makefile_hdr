#a Copyright
#  
#  This file 'makefile_hdr' copyright Gavin J Stark 2003, 2004
#  
#  This is free software; you can redistribute it and/or modify it however you wish,
#  with no obligations
#  
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even implied warranty of MERCHANTABILITY
#  or FITNESS FOR A PARTICULAR PURPOSE.

#a Documentation - This file is included in the CDL build system only
PREREQS ?= 
# $(PREREQS) should be a list of letters including:
#   b if backend includes are required
#   e if simulation engine includes are required
#   s if support includes are required
#   h if execution harness includes are required
#   i if exported includes are required
#   B if backend objects are required
#   E if simulation engine objects are required
#   S if support libraries are required
#   H if execution harness objects are required

#a Determine OS subdirectories - required for includes and objects for builds
Q:=@

ifneq (${BUILD_PYTHON},yes)
BUILD_PYTHON = no
# $(info Building without python bindings)
else
# $(info Building with python bindings)
endif
ifneq (${BUILD_VPI},yes)
BUILD_VPI = no
endif

#a Set up correct includes and objects for builds
CYCLICITY_INCLUDES    = -I ${CDL_BUILD_INCLUDE_DIR}
CYCLICITY_LIBS        = -L ${CDL_BUILD_LIB_DIR} 
CYCLICITY_LIBS_PYTHON = -L ${CDL_BUILD_LIB_DIR} 

BACKEND_INCLUDES :=
ENGINE_INCLUDES :=
SUPPORT_INCLUDES := 
HARNESS_INCLUDES := 
BACKEND_OBJECTS :=
ENGINE_LIBS :=
ENGINE_OBJECTS :=
SUPPORT_OBJECTS := 
SUPPORT_LIBS :=
HARNESS_BATCH_OBJECTS := 
HARNESS_GUI_OBJECTS := 

ifneq (,$(findstring S,${PREREQS}))
CYCLICITY_LIBS        += -lcdl_sl
CYCLICITY_LIBS_PYTHON += -lcdl_sl_python
SUPPORT_LIBS := -lpthread
endif

ifneq (,$(findstring b,${PREREQS}))
CYCLICITY_INCLUDES  += -I ${CDL_SRC_ROOT}/backend
endif
ifneq (,$(findstring B,${PREREQS}))
CYCLICITY_INCLUDES     += -I ${CDL_SRC_ROOT}/backend
CYCLICITY_LIBS         += ${CDL_BUILD_OBJ_DIR}/be_backend.o
CYCLICITY_LIBS_PYTHON  += ${CDL_BUILD_OBJ_DIR}/be_backend.o
endif

ifneq (,$(findstring e,${PREREQS}))
CYCLICITY_INCLUDES  += -I ${CDL_SRC_ROOT}/simulation_engine
endif
ifneq (,$(findstring E,${PREREQS}))
CYCLICITY_INCLUDES  += -I ${CDL_SRC_ROOT}/simulation_engine
endif

#a Resultant 'libraries'
SUPPORT_PLAIN_LIBRARY   := libcdl_sl.a
SUPPORT_PYTHON_LIBRARY  := libcdl_sl_python.a
SIMULATION_LIBRARY         := libcdl_se_no_harness.a
SIMULATION_LIBRARY_BATCH   := libcdl_se_batch.a
SIMULATION_LIBRARY_PYTHON  := libcdl_se_python.a
ifeq (${BUILD_PYTHON},no)
SUPPORT_PYTHON_LIBRARY    := python_is_not_configured
SIMULATION_LIBRARY_PYTHON := python_is_not_configured
endif

#a Compiler flags
CFLAGS   += -Wall
CXXFLAGS += -Wall
ifeq (${DEBUG_BUILD},yes)
	CFLAGS += -g -DDEBUG_ENABLED
	LDFLAGS += -g
else
	CFLAGS += -O2
	CXXFLAGS += -O2
endif

CFLAGS    += ${CYCLICITY_INCLUDES}
CXXFLAGS  += ${CYCLICITY_INCLUDES}
LDFLAGS   += -L${CDL_BUILD_LIB_DIR}

#a Install
.PHONY: install install_include install_bin install_lib install_script install_python
install: install_include install_bin install_lib install_script install_python

#a Templates
#f objs_from_srcs
# @param $1 object directory
# @param $2 source filenames
objs_from_srcs = $(foreach SRC,${2},$(patsubst %.c,${1}/%.o,$(patsubst %.cpp,%.c,${SRC:.y=.cpp})))

#f compile_cpp
define compile_cpp
# @param $1 object directory
# @param $2 source directory
# @param $3 source filename (.cpp)
# @param $4 Extra C flags
# @param $5 Extra dependencies

$1/$(3:.cpp=.o): $2/$3
	@echo "C++ $3 -o $$@ ${CXXFLAGS}"
	${Q}${CXX} ${CXXFLAGS} -c -Wp,-MD,$1/$(3:.cpp=.P) $2/$3 $4 -o $$@

$1/$(3:.cpp=.o): $5

-include $1/$(3:.cpp=.P)

endef

#f compile_c
define compile_c
# @param $1 object directory
# @param $2 source directory
# @param $3 source filename (.c)
# @param $4 Extra C flags
# @param $5 Extra dependencies

$1/$(3:.c=.o): $2/$3
	@echo "C++ $3 -o $$@ ${CFLAGS}"
	${Q}${CC} ${CFLAGS} -c -Wp,-MD,$1/$(3:.c=.P) $2/$3 $4 -o $$@

$1/$(3:.c=.o): $5

-include $1/$(3:.c=.P)

endef

#f compile_cpps
define compile_cpps
# @param $1 object directory
# @param $2 source directory
# @param $3 source filenames (.cpp)
# @param $4 Extra C flags
# @param $5 Extra dependencies
$(foreach x,$(filter %.cpp,$3),$(eval $(call compile_cpp,$1,$2,$x,$4,$5)))
$(foreach x,$(filter %.c,$3),$(eval $(call compile_c,$1,$2,$x,$4,$5)))
endef

#f bison_to_h_and_o
# @param $1 object directory
# @param $2 source directory
# @param $3 grammar filename (.y)
# @param $4 Extra C flags
#
# Using bison 2.3 a single invocation of bison can create header and c file
#
# This then can copy the files created to the correct names
#
# The dependency chain is defined precisely here as:
# .y -> .tab.c (and .tab.h implicitly) -> .cpp -> .h
# If the bison step fails then .cpp will not be created neither will .h
#
# Having .h depend on .cpp means the make process has to complete
# all these steps before other CPP files are compiled to make debug simpler
#
define bison_to_h_and_o

$1/$(3:.y=.tab.c): $2/$3
	${YACC} --debug -d $2/$3 --output=$$@

$1/$(3:.y=.tab.h): $1/$(3:.y=.tab.c)
	${Q}echo

$1/$(3:.y=.cpp): $1/$(3:.y=.tab.c)
	cp $1/$(3:.y=.tab.c) $$@

$1/$(3:.y=.h): $1/$(3:.y=.tab.h) $1/$(3:.y=.cpp)
	cp $1/$(3:.y=.tab.h) $$@

$(eval $(call compile_cpp,${OBJ_DIR},${OBJ_DIR},$(3:.y=.cpp),-I$2))

endef

#f make_static_library
define make_static_library
# @param $1 library filename
# @param $2 objects
# @param $3 static libraries to include in addition - must be ${CDL_BUILD_LIB_DIR}/lib<x>.a

$1:$2
	@echo "make static library $$@"
	${Q}mkdir -p $1__library_dir
	${Q}(cd $1__library_dir $(foreach l,$3,&& ar x ${CDL_BUILD_LIB_DIR}/lib$l.a))
	${Q}(cd $1__library_dir && cp $2 $1__library_dir)
	${Q}(cd $1__library_dir && ${MAKE_STATIC_LIBRARY} $$@ *)

endef

#f install_static_library - installs in lib (from CDL_BUILD_LIB_DIR)
define install_static_library
# @param $1 library name (must be built as ${CDL_BUILD_LIB_DIR}/$1)

install_bin: install__$1

# Use INSTALL_DATA as it does not strip the library - that would make it uselss
install__$1: ${CDL_BUILD_LIB_DIR}/$1
	@echo "install static library $1"
	${Q} [ -d ${INSTALL_LIB_DIR} ] || mkdir -p ${INSTALL_LIB_DIR}
	${Q}${INSTALL_DATA} $$< ${INSTALL_LIB_DIR}

endef

#f make_static_binary
define make_static_binary
# @param $1 binary filename
# @param $2 objects
# @param $3 libraries

$1:$2
	@echo "make static binary $$@"
	${Q}${MAKE_STATIC_BINARY} $$@ $2 $3

endef

#f install_static_binary - installs in bin (from CDL_BUILD_BIN_DIR)
define install_static_binary
# @param $1 binary name (must be built in to ${CDL_BUILD_BIN_DIR}/$1

install_bin: install__$1

install__$1: ${CDL_BUILD_BIN_DIR}/$1
	@echo "install static binary $1"
	${Q} [ -d ${INSTALL_BIN_DIR} ] || mkdir -p ${INSTALL_BIN_DIR}
	${Q}${INSTALL_PROGRAM} $$< ${INSTALL_BIN_DIR}

endef

#f install_script - installs in libexec/cdl normally (from CDL_SCRIPTS_DIR)
define install_script
# @param $1 script filename - should be in ${CDL_SCRIPTS_DIR}
install_script: install__$1

install__$1: ${CDL_SCRIPTS_DIR}/$1
	@echo "install script $1"
	${Q} [ -d ${INSTALL_SCRIPT_DIR} ] || mkdir -p ${INSTALL_SCRIPT_DIR}
	${Q}${INSTALL_SCRIPT} $$< ${INSTALL_SCRIPT_DIR}

endef

#f install_bin_script - installs in bin normally (from CDL_SCRIPTS_DIR)
define install_bin_script
# @param $1 executable filename - should be in ${CDL_SCRIPTS_DIR}
install_script: install__$1

install__$1: ${CDL_SCRIPTS_DIR}/$1
	@echo "install binary script $1"
	${Q} [ -d ${INSTALL_BIN_DIR} ] || mkdir -p ${INSTALL_BIN_DIR}
	${Q}${INSTALL_SCRIPT} $$< ${INSTALL_BIN_DIR}

endef

#f install_data - installs in lib/cdl normally (from CDL_SCRIPTS_DIR)
define install_data
# @param $1 executable filename - should be in ${CDL_SCRIPTS_DIR}
install_script: install__$1

install__$1: ${CDL_SCRIPTS_DIR}/$1
	@echo "install data script $1"
	${Q} [ -d ${INSTALL_DATA_DIR} ] || mkdir -p ${INSTALL_DATA_DIR}
	${Q}${INSTALL_DATA} $$< ${INSTALL_DATA_DIR}

endef

#f add_include
define add_include
# @param $1 include filename

include: ${CDL_BUILD_INCLUDE_DIR}/$1

${CDL_BUILD_INCLUDE_DIR}/$1: $1
	@echo "cp include $1" 
	${Q}cp $$< $$@

install_include: install__$1

install__$1: ${CDL_BUILD_INCLUDE_DIR}/$1
	@echo "install include $1"
	${Q} [ -d ${INSTALL_HDRS_DIR} ] || mkdir -p ${INSTALL_HDRS_DIR}
	${Q}${INSTALL_DATA} $$< ${INSTALL_HDRS_DIR}

endef

#f add_includes
#
# Add a list of includes
#
# @param $1	includes
#
define add_includes
$(foreach x,$1,$(eval $(call add_include,$x)))
endef

#f add_python_file
define add_python_file
# @param $1 python filename - to be installed from local directory to INSTALL_PYTHON_DIR

install_python: install__py__$1

install__py__$1: $1
	@echo "install python file $1"
	${Q} [ -d ${INSTALL_PYTHON_DIR} ] || mkdir -p ${INSTALL_PYTHON_DIR}
	${Q}${INSTALL_DATA} $$< ${INSTALL_PYTHON_DIR}

endef

#f add_python_files
#
# Add a list of python files
#
# @param $1	python files
#
define add_python_files
$(foreach x,$1,$(eval $(call add_python_file,$x)))
endef

#f new_stamp
#
# Define a new makefile stamp
#
# @param $1	stamp name
#
define new_stamp

MK_$1 := ${CDL_BUILD_STAMPS_DIR}/$1

.PHONY: $1

$1: $$(MK_$$1)

endef

