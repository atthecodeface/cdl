#a Copyright
#  
#  This file 'makefile_hdr' copyright Gavin J Stark 2003, 2004
#  
#  This is free software; you can redistribute it and/or modify it however you wish,
#  with no obligations
#  
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even implied warranty of MERCHANTABILITY
#  or FITNESS FOR A PARTICULAR PURPOSE.

#a Documentation
# ${CDL_ROOT} should point at cvstree/hardware/cyclicity (set in parent makefile)
# ${arch} should be cygwin or linux (set in a user's .login or equivalent)
# $(PREREQS) should be a list of letters including:
#   b if backend includes are required
#   e if simulation engine includes are required
#   s if support includes are required
#   h if execution harness includes are required
#   i if exported includes are required
#   B if backend objects are required
#   E if simulation engine objects are required
#   S if support libraries are required
#   H if execution harness objects are required

#a Determine OS subdirectories - required for includes and objects for builds
objs_from_srcs = $(foreach SRC,${1},$(patsubst %.cpp,${OS_DIR}/%.o,${SRC:.y=.cpp}))

#a Set up correct includes and objects for builds
BACKEND_INCLUDES :=
ENGINE_INCLUDES :=
SUPPORT_INCLUDES := 
HARNESS_INCLUDES := 
EXPORTED_INCLUDES := 
BACKEND_OBJECTS :=
ENGINE_LIBS :=
ENGINE_OBJECTS :=
SUPPORT_OBJECTS := 
SUPPORT_LIBS :=
HARNESS_BATCH_OBJECTS := 
HARNESS_GUI_OBJECTS := 

ifneq (,$(findstring b,${PREREQS}))
BACKEND_INCLUDES := -I ${CDL_ROOT}/backend
endif
ifneq (,$(findstring B,${PREREQS}))
BACKEND_INCLUDES := -I ${CDL_ROOT}/backend
BACKEND_OBJECTS := ${CDL_BUILD_OBJ_DIR}/be_backend.o
endif

ifneq (,$(findstring e,${PREREQS}))
ENGINE_INCLUDES := -I ${CDL_ROOT}/simulation_engine
endif
ifneq (,$(findstring E,${PREREQS}))
ENGINE_INCLUDES   := -I ${CDL_ROOT}/simulation_engine
ENGINE_LIBFILE    := se_simulation_engine
ENGINE_LIBS       := ${CDL_BUILD_OBJ_DIR}/lib${ENGINE_LIBFILE}.so
ENGINE_OBJECTS    := ${CDL_BUILD_OBJ_DIR}/lib${ENGINE_LIBFILE}.so
endif

ifneq (,$(findstring s,${PREREQS}))
SUPPORT_INCLUDES := -I ${CDL_ROOT}/support_libraries
endif
ifneq (,$(findstring S,${PREREQS}))
SUPPORT_INCLUDES            := -I ${CDL_ROOT}/support_libraries
SUPPORT_OBJECTS             := ${CDL_LIB_DIR}/sl_support.o
SUPPORT_WITH_PYTHON_OBJECTS := ${CDL_LIB_DIR}/sl_support_with_python.o
SUPPORT_LIBS := -lpthread
endif

ifneq (,$(findstring h,${PREREQS}))
HARNESS_INCLUDES := -I ${CDL_ROOT}/execution_harnesses
endif
ifneq (,$(findstring H,${PREREQS}))
HARNESS_INCLUDES := -I ${CDL_ROOT}/execution_harnesses
HARNESS_BATCH_OBJECTS := ${CDL_BUILD_OBJ_DIR}/eh_batch_scripting_harness.o
HARNESS_GUI_OBJECTS := ${CDL_BUILD_OBJ_DIR}/eh_python_scripting_harness.o
HARNESS_VPI_OBJECTS := ${CDL_BUILD_OBJ_DIR}/eh_vpi_harness.o
ifeq ($(BUILD_PYTHON),no)
HARNESS_GUI_OBJECTS := 
endif
ifeq ($(BUILD_VPI),no)
HARNESS_VPI_OBJECTS := 
endif
endif

ifneq (,$(findstring i,${PREREQS}))
EXPORTED_INCLUDES := -I ${CDL_ROOT}/include
endif

#a Default linux environment
# Use '=' here as SPECIFIC_INCLUDES is set AFTER this file is included
BUILD_FLAGS = ${CONFIG_OPTIMIZATION_FLAGS}
CYCLICITY_INCLUDES     = -I ${CDL_INCLUDE_DIR} ${SUPPORT_INCLUDES} ${BACKEND_INCLUDES} ${ENGINE_INCLUDES} ${HARNESS_INCLUDES} ${EXPORTED_INCLUDES}
CYCLICITY_OBJS         = ${BACKEND_OBJECTS} ${SUPPORT_OBJECTS}
CYCLICITY_PYTHON_OBJS  = ${BACKEND_OBJECTS} ${SUPPORT_WITH_PYTHON_OBJECTS}
CYCLICITY_LIBS         = ${ENGINE_LIBS} ${SUPPORT_LIBS}

LIBS = 
LIB_DEP_EXT = so
LIB_EXT = so

#a Makefile flags
# for verbose builds use Q:=
Q:=@

#a Compiler flags
COMPILE_OPTIMIZATION_FLAGS := -O2 -Wall
LINK_OPTIMIZATION_FLAGS := 
ifeq (${DEBUG_BUILD},yes)
	COMPILE_OPTIMIZATION_FLAGS := -DDEBUG_ENABLED -g -Wall
	LINK_OPTIMIZATION_FLAGS := -g
endif

CFLAGS   = ${COMPILE_OPTIMIZATION_FLAGS} ${CYCLICITY_INCLUDES} ${SPECIFIC_INCLUDES} ${OS_CFLAGS}    ${LOCAL_CFLAGS}
CXXFLAGS = ${COMPILE_OPTIMIZATION_FLAGS} ${CYCLICITY_INCLUDES} ${SPECIFIC_INCLUDES} ${OS_CXXFLAGS}  ${LOCAL_CXXFLAGS}
LINKFLAGS = ${LINK_OPTIMIZATION_FLAGS} -L${CDL_ROOT}/lib/${OS_DIR}                 ${OS_LINKFLAGS} ${LOCAL_LINKFLAGS}
LD_LIBS = ${CYCLICITY_LIBS} -lm -lc

#a Os-specific overrides - libs for python and DLL generation issues
ifndef PYTHON_ROOT
  PYTHON_ROOT := /usr
endif

#a Default patterns
${OS_DIR}/%.o : %.cpp
	@echo "CC $< -o $@"
	$(Q)$(CC) -c ${CXXFLAGS} -Wp,-MD,${OS_DIR}/$*.P $< -o $@

