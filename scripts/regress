#!/usr/bin/perl

#a Copyright
#  
#  This file 'regress' copyright Gavin J Stark 2003, 2004
#  
#  This is free software; you can redistribute it and/or modify it however you wish,
#  with no obligations
#  
#  This software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even implied warranty of MERCHANTABILITY
#  or FITNESS FOR A PARTICULAR PURPOSE.

#a Main routine
use FindBin;
use lib "$FindBin::Bin";
use threads;
use threads::shared;
use Thread::Queue;
use strict;
use diagnostics;
use warnings;
use Getopt::Std;
use FileHandle;

#a Usage
sub usage {
    print <<END_USAGE;

 Usage and notes:

    regress [options] [<directory> <batch file>]*

  Options:
    -h                          Display this help file
    -b <binary directory>       Where to find 'sim'
    -m <max lines>              Maximum number of output lines to put out - error if exceeded - default 100,000
    -d <debug_level>            Simulation debug level
    -n <nthreads>               Parallelize execution over n threads
    -e <extra args>             Extra arguments passed the same to every sim

END_USAGE

exit;
}

my($pwd) = "$FindBin::Bin";

usage() unless ($#ARGV>=1);

#a Handle arguments
$|=1; #Turn on autoflush for stdout
my($bin_directory) = "";
my($debug_level) = "";
my($nthreads)=1;
my($extra_args)="";
my($max_lines)=100000;
my(%options);
my(@directories);
my(@batches);
getopts('hb:d:n:e:m:',\%options);

$bin_directory = $options{b} if (defined $options{b});
$debug_level   = $options{d} if (defined $options{d});
$nthreads      = $options{n} if (defined $options{n});
$extra_args    = $options{e} if (defined $options{e});
$max_lines     = $options{m} if (defined $options{m});
print "Running with $nthreads threads binary directory '$bin_directory' debug level '$debug_level' max lines $max_lines\n";
$bin_directory = shift @ARGV unless (defined $options{b});
$debug_level   = shift @ARGV unless (defined $options{d});
my($i);
for ($i=0; $i<$#ARGV; $i+=2) {
    $directories[++$#directories] = $ARGV[$i];
    $batches[++$#batches] = $ARGV[$i+1];
    print "Dir $directories[$#directories] batch $batches[$#batches]\n";
}

#a Global variables
my $lines_printed:shared = 0;
my $abort:shared = 0;
my $print_lock :shared;

#a Logging functions
#v Logging variables
my(@test_results, @test_file, @test_source, @test_args, $last_test_source, $in_log_entry, $sep);
$#test_results = 0;
$last_test_source = "";
$in_log_entry = 0;
$sep = "@@@";
$test_args[$#test_results] = "";

#a Logging functions
#f finish_log_entry
sub finish_log_entry {
    my ($result) = @_;
    $test_results[$#test_results] = $result;
    $#test_results++;
    $test_args[$#test_results] = "";
    $in_log_entry = 0;
}

#f add_to_log
sub add_to_log {
    my ($reason, $arg) = @_;
    if ($reason =~ /batch/) {
        finish_log_entry( "timeout" ) if ($in_log_entry);
        $last_test_source = $arg;
        return;
    }
    if ($reason =~ /hwfile/) {
        finish_log_entry( "timeout" ) if ($in_log_entry);
        $test_file[$#test_results] = $arg;
        $test_source[$#test_results] = $last_test_source;
        $in_log_entry = 1;
    }
    if ($reason =~ /pass/) {
        if (!$in_log_entry) {
            $test_file[$#test_results] = "***WARNING*** - got pass message ($arg) not within a test";
            $test_source[$#test_results] = $last_test_source;
            $in_log_entry = 1;
        }
        finish_log_entry( "pass".$sep.$arg );
    }
    if ($reason =~ /fail/) {
        if (!$in_log_entry) {
            $test_file[$#test_results] = "***ERROR*** $arg - got fail message not within a test";
            $test_source[$#test_results] = $last_test_source;
            $in_log_entry = 1;
        }
        finish_log_entry( "fail".$sep.$arg );
    }
    if ($reason =~ /arg/) {
        if ($in_log_entry) {
            $test_args[$#test_results] .= $sep.$arg;
        } else {
            print "***WARNING*** - Got test argument ($arg) not within a test\n";
        }
    }
}

#f summarize_log
sub summarize_log {
    finish_log_entry( "timeout" ) if ($in_log_entry);
    print "\n\n********************************************************************************\n";
    print "Summary of tests\n";
    print "********************************************************************************\n";
    my($error_count) = 0;
    for ($i=0; $i<$#test_results; $i++) {
        my($file) = $test_file[$i];
        $file = "<unknown file>" if ($file =~ /^$/ );
        my($source) = $test_source[$i];
        $source = "<unknown source>" if ($file =~ /^$/ );
        my(@args) = split( /$sep/, $test_args[$i] );
        my(@results) = split( /$sep/, $test_results[$i] );
        my($arg);
        if ($results[0]=~/pass/) {
            print "Pass $source : $file ($results[1]): ";
            foreach $arg (@args) {
                print "$arg ";
            }
            print "\n";
        }
        if ($results[0]=~/fail/) {
            $error_count++;
            print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
            print "Fail $source : $file ($results[1]): ";
            foreach $arg (@args) {
                print "$arg ";
            }
            print "\n";
            print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
        }
        if ($results[0]=~/timeout/) {
            $error_count++;
            print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
            print "Timed out $source : $file ($results[1]): ";
            foreach $arg (@args) {
                print "$arg ";
            }
            print "\n";
            print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
        }
    }
    print "\n\n";
    return $error_count;
}

#a Execution functions
#f atomic_print
sub atomic_print {
    my($id,$output) = @_;
    lock($print_lock);
    $lines_printed++;
    if ($lines_printed>=$max_lines) {
        print ">>>$id ********************************************************************************\n";
        print ">>>$id Failure: MAX LINES ($max_lines) EXCEEDED\n";
        print ">>>$id ********************************************************************************\n";
        lock($abort);
        $abort = 1;
    }
    print ">>>$id ".$output;
}

#f exec_test_in_dir
sub exec_test_in_dir {
    my ($trace, $dir, $batch, $id, $extra_args) = @_;
    my ($sim) = "$bin_directory/sim";
    my (@results);
    my ($cmd) = "";
    my ($local_abort);
    $trace->print("Exec test $dir\n");
    unless ($dir eq "") {
        my ($i);
        $cmd = "cd $dir;";
        foreach $i (split(/\//,$dir)) {
            $sim="../$sim";
        }
    }
    $#results=-1;
    $results[++$#results] = "batch$sep"."$dir/$batch";
    $cmd .= "time $sim --sl_debug_level $debug_level $extra_args $batch" if ($debug_level>=1);
    $cmd .= "time $sim $extra_args $batch" if ($debug_level<1);
    my($file) = new FileHandle;
    $trace->print("Start simulation\n");
    atomic_print($id, "Dir/cmd $dir:$cmd\n");
    $trace->print("Forking '$cmd'\n");
    my($child_pid) = open($file,"-|");
    if ($child_pid==0) {
        print "Child process started\n";
        exec("($cmd ) 2>&1");
    }
    $trace->print("Got pid $child_pid\n");
    $results[++$#results] = "fail$sep"."Failed to run tests at all - cmd '$cmd'" unless ($child_pid);
    while (<$file>) {
        $trace->print("$_");
        {
            lock($abort);
            $local_abort = $abort;
        }
        close($file) if ($local_abort);
        last if ($local_abort);
        {
            lock($print_lock);
            atomic_print($id,"    $_");
            chomp;
            my($line) = $_;
            $trace->print("-");
            if ($line =~ /^simulation_engine \(v.*\): Reading hw file '(\S+)'/) {
                $results[++$#results] = "hwfile$sep".$1;
            } elsif ($line =~ /Pass(.*):Test succeeded/) {
                $results[++$#results] = "pass$sep".$1;
            } elsif ($line =~ /Fail(.*):/) {
                $results[++$#results] = "fail$sep".$1;
            } elsif ($line =~ /batch arg (.*)/) {
                $results[++$#results] = "arg$sep".$1;
            }
            $trace->print("+");
        }
    }
    $trace->print("\nEOF from child\n");
    waitpid($child_pid,0);
    my($child_result) = $? >> 8;
    $results[++$#results] = "fail".$sep."Child process aborted with result $child_result" if ($child_result!=0);
    $trace->print("\nCompleted with error code $child_result\n");
    {
        lock($abort);
        if ($abort) {
            $results[++$#results] = "fail$sep"."Aborted";
        }
    }
    close($file);
    $trace->print("Return\n");
    return \@results;
}

#f worker_thread
sub worker_thread {
    my ($id, $workers_ready, $work_queues_array, $result_queue) = @_;
    my ($running) = 1;
    my ($work, $start_dir, $dir, $batch);
    atomic_print($id,"Worker $id starting\n");
    my($trace) = new FileHandle;
    #$trace->open(">/tmp/log.".getppid().".$id");
    $trace->open(">/dev/null");
    $trace->autoflush(1);
    $trace->print("Started\n");
    while ($running) {
        $trace->print("Enqueue\n");
        atomic_print( $id, "Worker $id ready\n" );
        $workers_ready->enqueue($id);
        $trace->print("Dequeue\n");
        atomic_print( $id, "Worker $id waiting for work\n" );
        $work = $work_queues_array->[$id]->dequeue();
        $trace->print("Work $work\n");
        atomic_print( $id, "Worker $id got work $work\n" );
        if ($work eq "end") {
            $trace->print("Killing running\n");
            $running = 0;
        } elsif ($abort) {
            $trace->print("Enqueue fail result\n");
            $result_queue->enqueue("fail$sep"."Aborted before execution".$sep.$sep);
        } else {
            $trace->print("Run work\n");
            ($start_dir, $dir, $batch, $extra_args) = split(/$sep/,$work);
            chdir($start_dir);
            atomic_print( $id, "Worker thread $id running test from dir '$start_dir' in dir '$dir' batch '$batch' extra args '$extra_args'\n" );
            $trace->print("exec_test_in_dir $dir, $batch, $id, $extra_args\n");
            my($results) = exec_test_in_dir( $trace, $dir, $batch, $id, $extra_args );
            my($results_string) = "";
            my($r);
            foreach $r (@$results) {
                $results_string .= $r.$sep.$sep;
            }
            $trace->print("enqueue results $results_string\n");
            atomic_print( $id, "Worker thread $id enqueuing results $results_string\n" );
            $result_queue->enqueue($results_string);
        }
        $trace->print("Done loop\n");
    }
    $trace->print("Ended\n");
    return;
}

#f add_worker_thread
sub add_worker_thread {
    my ($id, $workers_ready, $result_queue,$work_queues_array, $worker_threads_array) = @_;
    atomic_print( $id, "Add worker thread $id\n");
    $worker_threads_array->[$id] = threads->new(\&worker_thread, $id, $workers_ready, $work_queues_array, $result_queue );
}

#f wait_for_worker_thread
sub wait_for_worker_thread {
    my ($id,$worker_threads_array) = @_;
    $worker_threads_array->[$id]->join;
}

#f give_to_worker
sub give_to_worker {
    my ($worker, $work_queues_array, $start_dir, $dir, $batch, $extra_args ) = @_;
    my $work = "$start_dir"."$sep"."$dir"."$sep"."$batch"."$sep"."$extra_args";
    atomic_print( $worker, "Giving work $work to worker $worker\n");
    $work_queues_array->[$worker]->enqueue($work);
}

#f ask_worker_to_end
sub ask_worker_to_end {
    my ($worker, $work_queues_array) = @_;
    $work_queues_array->[$worker]->enqueue("end");
}

#a Toplevel

my($cwd) = `pwd`;
chomp($cwd);
my($start_dir) = $cwd;
print "Starting in directory $start_dir\n";

my $workers_ready = Thread::Queue->new;
my $result_queue  = Thread::Queue->new;
my(@work_queues);
my(@worker_threads);
print "Adding worker threads\n";
for ($i=0; $i<$nthreads; $i++) {
    $work_queues[$i] = Thread::Queue->new;
    add_worker_thread( $i, $workers_ready, $result_queue, \@work_queues, \@worker_threads );
}

atomic_print("main","Starting to give work to worker threads\n");
for ($i=0; $i<=$#batches; $i++) {
    atomic_print("main","Waiting for worker to be ready\n");
    my($worker) = $workers_ready->dequeue;
    give_to_worker( $worker, \@work_queues, $start_dir, $directories[$i], $batches[$i], $extra_args );
}

atomic_print("main","Asking workers to end\n");
for ($i=0; $i<$nthreads; $i++) {
    atomic_print("main","Waiting for worker to be ready\n");
    my($worker) = $workers_ready->dequeue;
    atomic_print("main","Worker $worker is ready - send it an end\n");
    ask_worker_to_end( $worker, \@work_queues );
}

atomic_print("main","Waiting for workers to end\n");
for ($i=0; $i<$nthreads; $i++) {
    wait_for_worker_thread( $i, \@worker_threads );
}

print "Handling log file\n";
my($result_string);
while ($result_string = $result_queue->dequeue_nb) {
    foreach $i (split(/$sep$sep/,$result_string)) {
        my($reason,$arg) = split(/$sep/,$i);
        #print "$reason, $arg\n";
        add_to_log($reason, $arg);
    }
}

my($error_count) = summarize_log();
print "Exiting with Status $error_count\n";
exit ($error_count) ;

#a Editor preferences and notes
# Local Variables: ***
# mode: perl ***
# outline-regexp: "#[a!]\\\|#[\t ]*[b-z][\t ]" ***
# End: ***

